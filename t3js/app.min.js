const statusDisplay=document.querySelector(".game-status");let gameActive=!0,currentPlayer="X",gameState=["","","","","","","","",""];const winningMessage=()=>`Player ${currentPlayer} has won!`,drawMessage=()=>"Game ended in a draw!",currentPlayerTurn=()=>`It's ${currentPlayer}'s turn`;function handleCellPlayed(cellClicked,cellClickedIndex){gameState[cellClickedIndex]=currentPlayer,cellClicked.innerHTML=currentPlayer,console.log(gameState)}function handlePlayerChange(){currentPlayer="X"===currentPlayer?"O":"X",statusDisplay.innerHTML=currentPlayerTurn()}statusDisplay.innerHTML=currentPlayerTurn();const winningConditions=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];function handleResultValidation(){let roundWon=!1,gameDrawn;for(let i=0;i<=7;i++){const winCondition=winningConditions[i];let a=gameState[winCondition[0]],b=gameState[winCondition[1]],c=gameState[winCondition[2]];if(""!==a&&""!==b&&""!==c&&(a===b&&b===c)){roundWon=!0;break}}return roundWon?(statusDisplay.innerHTML=winningMessage(),void(gameActive=!1)):gameState.includes("")?void handlePlayerChange():(statusDisplay.innerHTML="Game ended in a draw!",void(gameActive=!1))}function handleCellClick(cellClickedEvent){const cellClicked=cellClickedEvent.target,cellClickedIndex=parseInt(cellClicked.getAttribute("data-cell-index"));""===gameState[cellClickedIndex]&&gameActive&&(handleCellPlayed(cellClicked,cellClickedIndex),handleResultValidation())}function handleRestartGame(){gameActive=!0,currentPlayer="X",gameState=["","","","","","","","",""],document.querySelectorAll(".cell").forEach(cell=>cell.innerHTML=""),statusDisplay.innerHTML=currentPlayerTurn()}document.querySelectorAll(".cell").forEach(cell=>cell.addEventListener("click",handleCellClick)),document.querySelector(".restart-game").addEventListener("click",handleRestartGame);